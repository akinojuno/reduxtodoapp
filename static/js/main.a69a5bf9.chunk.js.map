{"version":3,"sources":["components/PendingTasks.js","components/AddTaskInput.js","components/DoneTasks.js","App.js","reportWebVitals.js","redux/reducer.js","redux/store.js","index.js"],"names":["PendingTasks","this","props","task","name","onClick","taskCompleted","deleteTask","id","React","Component","connect","state","tasks","dispatch","editTask","editedTask","type","payload","addTask","newTask","useState","setNewTask","errorMessage","setErrorMessage","className","value","onChange","event","target","trim","filter","toLowerCase","length","newTaskObject","uuidv4","status","TaskRow","App","pendingTasks","doneTasks","map","DoneTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","tasksCopy","updatedTasks","tasksCompleted","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a69a5bf9.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport './DoneDeleteBtn.css'\n\nclass PendingTasks extends React.Component {\n\n  \n//   editToDo = (id) => {\n//     let editedTask= this.props.tasks.map(task => {\n//         if (task.id === id) {\n//             return {\n//                 ...task,\n//                 status: 'Done'\n//             }\n//         }\n//         return task;\n//     })\n//     this.props.editTask(editedTask);\n// }\n\n  render() {\n    return(\n      <tr>\n        <td>\n          <span>{this.props.task.name}</span>\n          {/* <button onClick={ () => this.editTask(this.props.task.id)} >üìù</button> */}\n          <button onClick={ ()=> this.props.taskCompleted(this.props.task.name) }>‚úîÔ∏è</button>\n          <button onClick={ ()=> this.props.deleteTask(this.props.task.id) }>‚ùå</button>\n        </td>\n\n      </tr>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    tasks: state.tasks\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return{\n    editTask: editedTask => dispatch({type: 'EDIT_TODO', payload: editedTask}),\n    deleteTask: id => dispatch({type: 'DELETE_TASK', payload: id}),\n    taskCompleted: name => dispatch({type:'TASK_COMPLETED', payload: name})\n  };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PendingTasks);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useState } from 'react';\nimport './AddTaskInput.css';\n\nconst AddTaskInput = ({tasks, addTask}) => {\n\n  const [newTask, setNewTask] = useState(''); \n  const [errorMessage, setErrorMessage] = useState(''); \n\n  const addTaskInputChangeHandler = (event) => {\n    setNewTask(event.target.value);\n  }\n\n  const addTaskBtn = () => {\n    if(newTask.trim() === '') {\n      setErrorMessage('*this field cannot be blank')\n       } else if( tasks.filter( task => task.name.toLowerCase() === newTask.toLowerCase() ).length > 0 ) {\n           setErrorMessage('*task name already exists')\n       } else {            \n          let newTaskObject = {\n              id: uuidv4(),\n              name: newTask,\n              status: 'pending'\n             }\n          addTask(newTaskObject);\n          setErrorMessage('');    \n        }\n    setNewTask('');\n};  \n    return(\n      <div>\n        <div className=\"inputContainer\">\n          <input type=\"text\" value={newTask} onChange={addTaskInputChangeHandler}/>\n          <button className=\"addTaskBtn\" onClick={addTaskBtn}>Add Task</button>\n        </div>\n          <p><small>{errorMessage}</small></p>\n      </div>\n      \n    );\n  }\n\n\nconst mapStateToProps = ({tasks}) => {\n  return {\n    tasks\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTask: newTask => dispatch ({\n      type:'ADD_TASK', payload: newTask\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps) (AddTaskInput);","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass TaskRow extends React.Component {\n\n  render() {\n    return(\n      <tr>\n        <td>\n          <span>{this.props.task.name}</span>\n          <button onClick = {()=> this.props.deleteTask(this.props.task.id)}>‚ùå</button>\n        </td>\n        \n      </tr>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return{\n    deleteTask: id => dispatch({type: 'DELETE_TASK', payload: id}),\n  };\n};\n\n\nexport default connect(null, mapDispatchToProps)(TaskRow);","import './App.css';\nimport { connect } from 'react-redux';\nimport React from 'react';\nimport PendingTasks from './components/PendingTasks';\nimport AddTaskInput from './components/AddTaskInput';\nimport DoneTasks from './components/DoneTasks'\n\nclass App extends React.Component {\n  render() {\n    let pendingTasks = this.props.tasks.filter(task => task.status === 'pending')\n    let doneTasks = this.props.tasks.filter(task => task.status === 'done')\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"container\">\n           <h1> TO DO APP </h1>\n              <AddTaskInput />\n                <h2>Pending Tasks:</h2>\n              <table>\n                <tbody>\n                  { \n                    pendingTasks.length > 0 ?\n                      pendingTasks.map(task => (\n                          <PendingTasks key={task.id} task={task} />\n                        ))\n                    : <h5>No Pending Tasks</h5>\n                  }\n                </tbody>\n                  \n              </table>\n              <br />\n                  <h2>Done Tasks:</h2>\n              <table>\n                <tbody>\n                      {\n                      doneTasks.length > 0 ?\n                          doneTasks.map( task => (\n                          <DoneTasks key={task.id} task={task} /> \n                          )) \n                    : <h5>No Done Tasks</h5>\n                    }\n                </tbody>\n                  \n              </table>\n          </div>\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    tasks: state.tasks\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { v4 as uuidv4 } from 'uuid';\n\n\nconst initialState= {\n  tasks: [\n    {\n      id: uuidv4(),\n      name: 'eat',\n      status: 'pending'\n    },\n    {\n      id: uuidv4(),\n      name: 'code',\n      status: 'pending'\n    },\n    {\n      id: uuidv4(),\n      name: 'sleep',\n      status: 'done'\n    },\n  ],\n   errorMessage: ''\n}\n///this is your app\nconst reducer = (state = initialState, action) => {\n  switch(action.type){\n    case 'ADD_TASK':\n      let tasksCopy = [...state.tasks, action.payload];\n\n      return {\n        ...state,\n        tasks: tasksCopy\n      };\n      case 'DELETE_TASK':\n        let updatedTasks = state.tasks.filter(\n          task => task.id !== action.payload\n        );\n        return {\n          ...state,\n          tasks: updatedTasks\n        };\n       case 'TASK_COMPLETED':\n        let tasksCompleted = [...state.tasks]\n         tasksCompleted = tasksCompleted.map(task => {\n          if(action.payload === task.name){\n            task.status = 'done'\n          }\n          return task\n        })\n         return {\n           ...state,\n          tasks: tasksCompleted\n         }\n      default:\n        return state;\n  }\n}\n\nexport default reducer","import { createStore } from 'redux';\nimport reducer from './reducer'\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}